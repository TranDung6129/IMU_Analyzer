# File: debug_plugin_paths.py
import os
import sys
import importlib.util

def check_file_existence(file_path):
    """Ki·ªÉm tra xem t·ªáp c√≥ t·ªìn t·∫°i kh√¥ng v√† in th√¥ng tin chi ti·∫øt."""
    if os.path.exists(file_path):
        print(f"‚úÖ T·ªáp t·ªìn t·∫°i: {file_path}")
        try:
            spec = importlib.util.spec_from_file_location("module", file_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            # Li·ªát k√™ c√°c l·ªõp trong module
            import inspect
            classes = [name for name, obj in inspect.getmembers(module, inspect.isclass) 
                      if obj.__module__ == module.__name__]
            print(f"   C√°c l·ªõp trong module: {classes}")
            
            return True
        except Exception as e:
            print(f"‚ùå T·ªáp t·ªìn t·∫°i nh∆∞ng kh√¥ng th·ªÉ import: {str(e)}")
            return False
    else:
        print(f"‚ùå T·ªáp kh√¥ng t·ªìn t·∫°i: {file_path}")
        # In th√¥ng tin th∆∞ m·ª•c cha
        parent_dir = os.path.dirname(file_path)
        if os.path.exists(parent_dir):
            print(f"   Th∆∞ m·ª•c cha t·ªìn t·∫°i: {parent_dir}")
            print(f"   C√°c t·ªáp trong th∆∞ m·ª•c cha: {os.listdir(parent_dir)}")
        else:
            print(f"   Th∆∞ m·ª•c cha kh√¥ng t·ªìn t·∫°i: {parent_dir}")
        return False

# Th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n
project_root = os.path.abspath(os.path.dirname(__file__))
print(f"Th∆∞ m·ª•c g·ªëc d·ª± √°n: {project_root}")

# Danh s√°ch c√°c plugin paths c·∫ßn ki·ªÉm tra
plugin_files = [
    "src/io/readers/serial_reader.py",
    "src/io/readers/file_reader.py",
    "src/io/writers/file_writer.py",
    "src/plugins/configurators/witmotion_configurator.py",
    "src/plugins/decoders/custom_decoder.py"
]

# Ki·ªÉm tra t·ª´ng t·ªáp
for rel_path in plugin_files:
    abs_path = os.path.join(project_root, rel_path)
    check_file_existence(abs_path)

# Ki·ªÉm tra PYTHONPATH
print("\nPYTHONPATH:")
for path in sys.path:
    print(f" - {path}")

# In c·∫•u tr√∫c th∆∞ m·ª•c plugin
def print_dir_structure(directory, prefix=""):
    """In c·∫•u tr√∫c th∆∞ m·ª•c."""
    if not os.path.exists(directory):
        print(f"{prefix}‚ùå {os.path.basename(directory)}/ (kh√¥ng t·ªìn t·∫°i)")
        return
        
    print(f"{prefix}üìÅ {os.path.basename(directory)}/")
    prefix += "  "
    
    try:
        items = os.listdir(directory)
        for item in sorted(items):
            item_path = os.path.join(directory, item)
            if os.path.isdir(item_path):
                print_dir_structure(item_path, prefix)
            else:
                print(f"{prefix}üìÑ {item}")
    except PermissionError:
        print(f"{prefix}‚ùå Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p")

print("\nC·∫•u tr√∫c th∆∞ m·ª•c plugin:")
plugin_dirs = [
    os.path.join(project_root, "src", "io"),
    os.path.join(project_root, "src", "plugins")
]

for plugin_dir in plugin_dirs:
    print_dir_structure(plugin_dir)